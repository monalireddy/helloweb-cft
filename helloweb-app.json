{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create a load-balanced, autoscaled web server application.",
  "Parameters": {
    "InstanceType": {
      "Description": "Type of EC2 instance to launch",
      "Type": "String",
      "Default": "t2.micro"
    },
    "KeyName": {
      "Description": "EC2 KeyPair to allow SSH access to the instance",
      "Type": "String",
      "Default": "helloweb-cft"
    },
    "WebServerPort": {
      "Description": "Web Server Port",
      "Type": "String",
      "Default": "80"
    },
    "EC2AmiId": {
      "Description": "AMI ID to use",
      "Type": "String",
      "Default": "ami-db710fa3"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.40.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "10.40.0.0/16"
          }
        ]
      }
    },
    "NatGatewayEIP": {
      "Type" : "AWS::EC2::EIP",
      "Properties": {"Domain" : "VPC"}
    },
    "NATGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": { 
          "Fn::GetAtt": ["NatGatewayEIP","AllocationId"]
        },
        "SubnetId": { "Ref": "SubnetAPublic" }
      }
    },

    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "SubnetAPublic": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.40.2.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "A public"
          },
          {
            "Key": "Reach",
            "Value": "public"
          }
        ]
      }
    },
    "SubnetAPrivate": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.40.4.0/24",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "A private"
          },
          {
            "Key": "Reach",
            "Value": "private"
          }
        ]
      }
    },
    "SubnetBPublic": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.40.6.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "B public"
          },
          {
            "Key": "Reach",
            "Value": "public"
          }
        ]
      }
    },
    "SubnetBPrivate": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.40.8.0/24",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "B private"
          },
          {
            "Key": "Reach",
            "Value": "private"
          }
        ]
      }
    },
    "RouteTablePublic": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "A Public"
          }
        ]
      }
    },
    "RouteTablePrivate": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "A Private"
          }
        ]
      }
    },
    "RouteTableBPublic": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "B Public"
          }
        ]
      }
    },
    "RouteTableBPrivate": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "B Private"
          }
        ]
      }
    },
    "RouteTablePrivateRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "NATGateway",
      "Properties": {
        "RouteTableId": {
          "Ref":"RouteTablePrivate"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref":"NATGateway"
        }
      }
    },
    "RouteTableBPrivateRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "NATGateway",
      "Properties": {
        "RouteTableId": {
          "Ref":"RouteTableBPrivate"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref":"NATGateway"
        }
      }
    },
    "RouteTableAssociationAPublic": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetAPublic"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "RouteTableAssociationAPrivate": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetAPrivate"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivate"
        }
      }
    },
    "RouteTableAssociationBPublic": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetBPublic"
        },
        "RouteTableId": {
          "Ref": "RouteTableBPublic"
        }
      }
    },
    "RouteTableAssociationBPrivate": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetBPrivate"
        },
        "RouteTableId": {
          "Ref": "RouteTableBPrivate"
        }
      }
    },
    "RouteTablePublicInternetRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTablePublicBInternetRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTableBPublic"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "NetworkAclPublic": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public"
          }
        ]
      }
    },
    "NetworkAclPrivate": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private"
          }
        ]
      }
    },
    "SubnetNetworkAclAssociationAPublic": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetAPublic"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        }
      }
    },
    "SubnetNetworkAclAssociationAPrivate": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetAPrivate"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclPrivate"
        }
      }
    },
    "SubnetNetworkAclAssociationBPublic": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetBPublic"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        }
      }
    },
    "SubnetNetworkAclAssociationBPrivate": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetBPrivate"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclPrivate"
        }
      }
    },
    "NetworkAclEntryInPublicAllowAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        },
        "RuleNumber": 99,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPublicAllowAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        },
        "RuleNumber": 99,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": true,
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryInPrivateAllowVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAclPrivate"
        },
        "RuleNumber": 99,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPrivateAllowVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAclPrivate"
        },
        "RuleNumber": 99,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": true,
        "CidrBlock": "0.0.0.0/0"
      }
    },   
    "Ec2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn" : "ELBSecurityGroup",
      "Properties": {
        "GroupDescription": "Allow from ELB",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "ELBSecurityGroup",
                "GroupId"
              ]
            }            
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow from all",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": {
              "Ref": "WebServerPort"
            },
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:",
                {
                  "Ref": "WebServerPort"
                },
                "/"
              ]
            ]
          },
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "10"
        },
        "SecurityGroups": [
          {
            "Ref": "ELBSecurityGroup"
          }
        ],
        "LoadBalancerName": "helloweb-lb",
        "Subnets": [
          {
            "Ref": "SubnetAPublic"
          },
          {
            "Ref": "SubnetBPublic"
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "Ec2SecurityGroup"
          }
        ],
        "ImageId": {
          "Ref": "EC2AmiId"
        },
        "AssociatePublicIpAddress": "False",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "apt-get update -y\n",
                "apt-get install -y apache2\n",
                "sudo mkdir -p /var/www/test\n",
                "echo \"Hello Web\" >  /var/www/test/index.html\n",
                "sudo echo -e \"<VirtualHost *:80> \n  ServerName www.helloweb.com \n  DocumentRoot /var/www/test \n</VirtualHost>\" >  /etc/apache2/sites-available/test.conf\n",
                "sudo mkdir -p /var/www/test2\n",
                "echo \"Hello Web2\" >  /var/www/test2/index.html\n",
                "sudo echo -e \"<VirtualHost *:80> \n  ServerName www2.helloweb.com \n  DocumentRoot /var/www/test2 \n</VirtualHost>\" >  /etc/apache2/sites-available/test2.conf\n",
                "sudo a2ensite test.conf\n",
                "sudo a2ensite test2.conf\n",
                "sudo a2dissite 000-default.conf\n",
                "sudo apache2ctl configtest\n",
                "sudo service apache2 restart\n"
              ]
            ]
          }
        }
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "SubnetAPrivate"
          },
          {
            "Ref": "SubnetBPrivate"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": "3",
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "helloweb-app",
            "PropagateAtLaunch": "True"
          }
        ]
      }
    },
    "ScaleupPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "PercentChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "120",
        "PolicyType": "SimpleScaling",
        "ScalingAdjustment": "1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "2",
        "Statistic": "Average",
        "Threshold": "75",
        "AlarmDescription": "scale up if CPU > 75% for 2 mins",
        "Period": "60",
        "AlarmActions": [
          {
            "Ref": "ScaleupPolicy"
          }
        ],
        "Namespace": "AWS/EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "CPUUtilization"
      }
    },
    "ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "PercentChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "300",
        "PolicyType": "SimpleScaling",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUBackToNormal": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "5",
        "Statistic": "Average",
        "Threshold": "40",
        "AlarmDescription": "scale down if cpu < 40 for 5 mins",
        "Period": "60",
        "AlarmActions": [
          {
            "Ref": "ScaleDownPolicy"
          }
        ],
        "Namespace": "AWS/EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold",
        "MetricName": "CPUUtilization"
      }
    }
  },
    "Outputs": {
      "URL": {
        "Description": "URL for the website",
        "Value": {
          "Fn::Join": [
            "",
            [
              "http://",
              {
                "Fn::GetAtt": [
                  "ElasticLoadBalancer",
                  "DNSName"
                ]
              },
              "/"
            ]
          ]
        }
      }
    }
}
